spring:
  application:
    name: wj-elaon-gateway
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1
        enabled: true
      # 使用Nacos的服务注册与发现功能
      discovery:
        server-addr: 127.0.0.1
        enabled: true
    #使用sentinel 作为熔断器
    sentinel:
      transport:
        dashboard: 127.0.0.1:8080
    #设置与服务注册发现组件结合,这样就可以通过服务名进行动态路由
    gateway:
      discovery:
        locator:
          enabled: true
      #配置路由规则
      routes:
      - id: business-router  #这个ID 命名随意, 语义清楚 所有路由定义中唯一即可 因为要做 business服务的路由 所有 用business-router做ID
        uri: lb://wj-eloan-business-service # lb:// 为固定写法,表示开启负载均衡(loadBalance), wj-eloan-business-service为 服务在nacos中注册的服务名称
        # 谓词 必须的 匹配用户请求
        predicates:
        - Path=/seata/** # 使用"Path Route Predicate Factory"，规则为/seata开头的任意URI
        - Method=GET,POST
#        filters:  # 自定义限流策略
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 1
#            redis-rate-limiter.burstCapacity: 5
#            key-resolver: '#{@ipKeyResolver}' #限流resolver 选用自定义的 Ip限流策略
#      default-filters:  # 默认限流处理
#      - name: Hystrix
#        args:
#          name: default
#          fallbackUri: 'forward:/defaultFallback'


